{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig to read more about this file */
    /* Проекты */
    "incremental": true, // 2                            /* Сохранять файлы .tsbuildinfo для инкрементальной компиляции проектов. */
    // "composite": true, // -2                          /* Включить ограничения, позволяющие использовать проект TypeScript с ссылками на проекты. */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* Указать путь к файлу инкрементальной компиляции .tsbuildinfo. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Отключить предпочтение исходных файлов вместо файлов объявлений при ссылке на составные проекты. */
    // "disableSolutionSearching": true,                 /* Отключить проверку множественных проектных ссылок при редактировании. */
    // "disableReferencedProjectLoad": true,             /* Уменьшить количество автоматически загружаемых проектов TypeScript. */

    /* Язык и окружение */
    "target": "ESNext",                                  /* Установить версию языка JavaScript для генерируемого JavaScript и включить совместимые объявления библиотек. */
    "lib": ["DOM", "DOM.Iterable", "ESNext"], // 1       /* Указать набор объединенных файлов объявлений библиотек, описывающих целевую среду выполнения. */
    "jsx": "preserve", // 1                              /* Указать, какой код JSX генерируется. */
    // "experimentalDecorators": true,                   /* Включить экспериментальную поддержку устаревших экспериментальных декораторов. */
    // "emitDecoratorMetadata": true,                    /* Генерировать метаданные типа дизайна для декорированных объявлений в исходных файлах. */
    // "jsxFactory": "",                                 /* Указать функцию фабрики JSX, используемую при нацеливании на React JSX-эмит, например, 'React.createElement' или 'h'. */
    // "jsxFragmentFactory": "",                         /* Указать ссылку на JSX Fragment, используемую для фрагментов при нацеливании на React JSX-эмит, например, 'React.Fragment' или 'Fragment'. */
    "jsxImportSource": "vue", // 1                       /* Указать модульный спецификатор, используемый для импорта функций фабрики JSX при использовании 'jsx: react-jsx*'. */
    // "reactNamespace": "",                             /* Указать объект, вызываемый для 'createElement'. Это применяется только при нацеливании на 'react' JSX-эмит. */
    // "noLib": true,                                    /* Отключить включение любых файлов библиотек, включая lib.d.ts по умолчанию. */
    "useDefineForClassFields": true, // 1                /* Генерировать поля класса, совместимые со стандартом ECMAScript. */
    "moduleDetection": "force",                          /* Управление методом обнаружения файлов JS в формате модуля. */

    /* Модули */
    "module": "ESNext",                                  /* Указать, какой код модуля генерируется. */
    // "rootDir": "./",                                  /* Указать корневую папку в ваших исходных файлах. */
    "moduleResolution": "Bundler", // 1                  /* Указать, как TypeScript ищет файл по заданному модульному спецификатору. */
    // "baseUrl": "./",                                  /* Указать базовый каталог для разрешения не-относительных имен модулей. */
    // "paths": {},                                      /* Указать набор записей, перенаправляющих импорты в дополнительные места поиска. */
    // "rootDirs": [],                                   /* Разрешить обработку нескольких папок как одной при разрешении модулей. */
    // "typeRoots": [],                                  /* Указать несколько папок, которые действуют как './node_modules/@types'. */
    // "types": [],                                      /* Указать имена пакетов типов, которые должны быть включены без ссылки на их исходный файл. */
    // "allowUmdGlobalAccess": true,                     /* Разрешить доступ к глобальным объектам UMD из модулей. */
    // "moduleSuffixes": [],                             /* Список суффиксов имен файлов для поиска при разрешении модуля. */
    "allowImportingTsExtensions": true,                  /* Разрешить импорт файлов TypeScript с расширениями. Требуется установить '--moduleResolution bundler' и либо '--noEmit', либо '--emitDeclarationOnly'. */
    // "resolvePackageJsonExports": true,                /* Использовать поле 'exports' в package.json при разрешении импортов пакетов. */
    // "resolvePackageJsonImports": true,                /* Использовать поле 'imports' в package.json при разрешении импортов. */
    // "customConditions": [],                           /* Условия, устанавливаемые в дополнение к специфичным для разрешателя значениям по умолчанию при разрешении импортов. */
    "resolveJsonModule": true, // 1                      /* Включить импорт файлов .json. */
    // "allowArbitraryExtensions": true,                 /* Разрешить импорт файлов с любым расширением, при условии наличия файла объявлений. */
    // "noResolve": true,                                /* Запретить расширение числа файлов, которые TypeScript должен добавить в проект, с помощью 'import', 'require' или '<reference>'. */
    /* Поддержка JavaScript */
    // "allowJs": true,                                  /* Разрешить использование JavaScript-файлов в вашей программе. Используйте параметр 'checkJS', чтобы получать ошибки из этих файлов. */
    // "checkJs": true,                                  /* Включить сообщения об ошибках в проверенных типах JavaScript-файлов. */
    // "maxNodeModuleJsDepth": 1,                        /* Указать максимальную глубину папки, используемую для проверки JavaScript-файлов из 'node_modules'. Применимо только с 'allowJs'. */

    /* Генерация */
    "declaration": true, // 2                            /* Генерировать файлы .d.ts из файлов TypeScript и JavaScript в вашем проекте. */
    "declarationMap": true, // 2                         /* Создавать карты исходного кода для файлов .d.ts. */
    // "emitDeclarationOnly": true, // -2                /* Выводить только файлы .d.ts, а не файлы JavaScript. */
    // "sourceMap": true,                                /* Создавать файлы карты исходного кода для генерируемых файлов JavaScript. */
    // "inlineSourceMap": true,                          /* Включить файлы карты исходного кода внутри генерируемого JavaScript. */
    // "outFile": "./",                                  /* Указать файл, в который упаковываются все выходные файлы в один файл JavaScript. Если 'declaration' установлено в true, также указывает файл, в который упаковываются все выходные файлы .d.ts. */
    // "outDir": "./",                                   /* Указать папку для всех выходных файлов. */
    // "removeComments": true,                           /* Отключить генерацию комментариев. */
    "noEmit": true, //-1                                 /* Отключить генерацию файлов во время компиляции. */
    // "importHelpers": true,                            /* Разрешить импорт вспомогательных функций из tslib один раз для всего проекта, а не включать их в каждый файл. */
    // "importsNotUsedAsValues": "remove",               /* Указать поведение генерации/проверки для импортов, которые используются только для типов. */
    // "downlevelIteration": true,                       /* Генерировать более совместимый, но более подробный и менее производительный JavaScript для итерации. */
    // "sourceRoot": "",                                 /* Указать корневой путь для отладчиков для поиска исходного кода ссылочного файла. */
    // "mapRoot": "",                                    /* Указать местоположение, где отладчик должен искать файлы карты вместо сгенерированных местоположений. */
    // "inlineSources": true,                            /* Включить исходный код в карты исходного кода внутри генерируемого JavaScript. */
    // "emitBOM": true,                                  /* Выводить маркер порядка байтов UTF-8 (BOM) в начале выходных файлов. */
    // "newLine": "crlf",                                /* Установить символ новой строки для генерируемых файлов. */
    // "stripInternal": true,                            /* Отключить генерацию объявлений, содержащих '@internal' в их комментариях JSDoc. */
    // "noEmitHelpers": true,                            /* Отключить генерацию пользовательских вспомогательных функций, таких как '__extends', в скомпилированном выводе. */
    "noEmitOnError": true, // 2                          /* Отключить генерацию файлов, если есть ошибки проверки типов. */
    // "preserveConstEnums": true,                       /* Отключить стирание объявлений 'const enum' в сгенерированном коде. */
    // "declarationDir": "./",                           /* Указать папку для сгенерированных файлов объявлений. */
    // "preserveValueImports": true,                     /* Сохранять неиспользуемые импортированные значения в выходном JavaScript, которые в противном случае будут удалены. */

    /* Ограничения взаимодействия */
    "isolatedModules": true, // 1                        /* Обеспечить безопасную транспиляцию каждого файла без зависимости от других импортов. */
    "verbatimModuleSyntax": true, // 1                   /* Не преобразовывать или удалять импорты или экспорты, не помеченные только типом, чтобы они были записаны в формате выходного файла на основе настройки 'module'. */
    // "allowSyntheticDefaultImports": true,             /* Разрешить 'import x from y', когда модуль не имеет экспорта по умолчанию. */
    "esModuleInterop": true,                             /* Генерировать дополнительный JavaScript для облегчения поддержки импорта модулей CommonJS. Это включает 'allowSyntheticDefaultImports' для совместимости типов. */
    // "preserveSymlinks": true,                         /* Отключить разрешение символических ссылок на их фактический путь. Это соответствует тому же флагу в node. */
    "forceConsistentCasingInFileNames": true,            /* Убедиться, что регистр букв правильный при импорте. */

    /* Проверка типов */
    "strict": true,                                      /* Включить все опции строгой проверки типов. */
    // "noImplicitAny": true,                            /* Включить сообщения об ошибках для выражений и объявлений с подразумеваемым типом 'any'. */
    // "strictNullChecks": true,                         /* При проверке типов учитывать 'null' и 'undefined'. */
    // "strictFunctionTypes": true,                      /* При присваивании функций проверять, чтобы параметры и возвращаемые значения были совместимыми по подтипу. */
    // "strictBindCallApply": true,                      /* Проверять, чтобы аргументы для методов 'bind', 'call' и 'apply' соответствовали исходной функции. */
    // "strictPropertyInitialization": true,             /* Проверять наличие свойств класса, которые объявлены, но не установлены в конструкторе. */
    "noImplicitThis": true, // 1                         /* Включить сообщения об ошибках, когда 'this' имеет тип 'any'. */
    // "useUnknownInCatchVariables": true,               /* По умолчанию переменные в блоке catch имеют тип 'unknown', а не 'any'. */
    // "alwaysStrict": true,                             /* Гарантировать, что 'use strict' всегда генерируется. */
    "noUnusedLocals": true, // 1                         /* Включить сообщения об ошибках, когда локальные переменные не используются. */
    "noUnusedParameters": true, // 1                     /* Выдавать ошибку, когда параметр функции не используется. */
    // "exactOptionalPropertyTypes": true,               /* Интерпретировать необязательные типы свойств, как написано, а не добавлять 'undefined'. */
    // "noImplicitReturns": true,                        /* Включить сообщения об ошибках для кодовых путей, которые не возвращаются явно в функции. */
    "noFallthroughCasesInSwitch": true, // 1             /* Включить сообщения об ошибках для пропущенных случаев в операторах switch. */
    // "noUncheckedIndexedAccess": true,                 /* Добавить 'undefined' к типу при доступе с использованием индекса. */
    // "noImplicitOverride": true,                       /* Убедиться, что переопределяющие члены в производных классах помечены модификатором override. */
    // "noPropertyAccessFromIndexSignature": true,       /* Запретить использование доступа к свойствам для ключей, объявленных с использованием индексного типа. */
    // "allowUnusedLabels": true,                        /* Отключить сообщения об ошибках для неиспользуемых меток. */
    // "allowUnreachableCode": true,                     /* Отключить сообщения об ошибках для недостижимого кода. */

    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* Пропустить проверку типов файлов .d.ts, включенных в TypeScript. */
    "skipLibCheck": true                                 /* Пропустить проверку типов всех файлов .d.ts. */
  }
}
